{"version":3,"sources":["ProductCard.jsx","ProductsDisplay.jsx","ContentContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["ProductCard","_ref","index","react_default","a","createElement","src_ContentContainer","Consumer","_ref2","imageUrls","handleClick","className","alt","src","onClick","ProductsDisplay","count","Array","from","length","map","_","i","src_ProductCard","key","ImagesContext","React","createContext","ContentContainer","state","alert","_this2","this","fetch","then","response","json","jsonData","imageData","message","setState","catch","error","console","log","Provider","value","src_ProductsDisplay","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAkBeA,SAdK,SAAAC,GAAe,IAAZC,EAAYD,EAAZC,MACvB,OACEC,EAAAC,EAAAC,cAACC,EAAcC,SAAf,KACG,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,UAAWC,EAAdF,EAAcE,YAAd,OACCP,EAAAC,EAAAC,cAAA,OAAKM,UAAU,gBACbR,EAAAC,EAAAC,cAAA,OAAKO,IAAI,GAAGC,IAAKJ,EAAUP,KAC3BC,EAAAC,EAAAC,cAAA,UAAQS,QAAS,kBAAMJ,EAAYR,KAAnC,oBCEOa,EATS,SAAAd,GAAA,IAAGe,EAAHf,EAAGe,MAAH,OACtBb,EAAAC,EAAAC,cAAA,OAAKM,UAAU,mBACZM,MAAMC,KAAK,CAAEC,OAAQH,IAASI,IAAI,SAACC,EAAGC,GAAJ,OACjCnB,EAAAC,EAAAC,cAACkB,EAAD,CAAarB,MAAOoB,EAAGE,IAAKF,QCF5BG,EAAgBC,IAAMC,cAAc,IAyC3BC,6MArCbC,MAAQ,CACNpB,UAAW,MAabC,YAAc,SAAAR,GAEZ4B,MAAM5B,uFAZY,IAAA6B,EAAAC,KAClB,OAAOC,MAVM,+CAWVC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACH,IAAMC,EAAYD,EAASE,QAC3BR,EAAKS,SAAS,CAAE/B,UAAW6B,MAE7BG,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,sCAU9B,OACEvC,EAAAC,EAAAC,cAACoB,EAAcoB,SAAf,CACEC,MAAO,CACLrC,UAAWuB,KAAKH,MAAMpB,UACtBC,YAAasB,KAAKtB,cAEpBP,EAAAC,EAAAC,cAAA,OAAKM,UAAU,qBACbR,EAAAC,EAAAC,cAAC0C,EAAD,CAAiB/B,MAAOgB,KAAKH,MAAMpB,UAAUU,kBA9BxB6B,aCShBC,mLANZ,OACE9C,EAAAC,EAAAC,cAACC,EAAD,aANa0C,aCQEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC","file":"static/js/main.c675e06a.chunk.js","sourcesContent":["import React from 'react';\nimport ImagesContext  from './ContentContainer.jsx'\n\n\nconst ProductCard = ({ index }) => {\nreturn (\n  <ImagesContext.Consumer>\n    {({ imageUrls, handleClick }) => (\n      <div className=\"Product-Card\">\n        <img alt=\"\" src={imageUrls[index]} />\n        <button onClick={() => handleClick(index)}>Add To Cart</button>\n      </div>\n    )}\n  </ImagesContext.Consumer>\n ) \n}\n\n\nexport default ProductCard; ","import React from 'react'; \nimport ProductCard from './ProductCard.jsx'\n\nconst ProductsDisplay = ({ count }) => (\n  <div className=\"product-display\">\n    {Array.from({ length: count }).map((_, i) => (\n      <ProductCard index={i} key={i} />\n    ))}\n  </div>\n);\n\n\nexport default ProductsDisplay; ","import React from 'react'; \nimport { Component } from'react'\nimport ProductsDisplay from './ProductsDisplay.jsx'\nconst endpoint = 'https://dog.ceo/api/breeds/image/random/20 '\nconst ImagesContext = React.createContext({});\n\nclass ContentContainer extends Component {\n  \n  state = {\n    imageUrls: []\n  }\n\n  componentDidMount() {\n    return fetch(endpoint)\n      .then(response => response.json())\n      .then(jsonData => {\n         const imageData = jsonData.message\n         this.setState({ imageUrls: imageData })\n      })\n      .catch(error => console.log(error)) \n  }; \n\n  handleClick = index => {\n    //do something\n    alert(index);\n  };\n\n\n  render() {\n    return (\n      <ImagesContext.Provider\n        value={{\n          imageUrls: this.state.imageUrls,\n          handleClick: this.handleClick,\n        }}>\n        <div className=\"content-container\">\n          <ProductsDisplay count={this.state.imageUrls.length} />\n        </div>\n      </ImagesContext.Provider>\n    );\n  }\n}\n\n\n\nexport default ContentContainer; ","import React, { Component } from 'react';\nimport './App.css';\nimport ContentContainer from './ContentContainer';\n\nclass App extends Component {\n\n\n\n  render() {\n   return (\n     <ContentContainer />\n    ) \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}